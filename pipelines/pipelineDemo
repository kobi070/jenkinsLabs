pipeline {
    agent any

    environment {
        // Set the environment variables
        FLASK_ENV = 'development'
        PROJECT_HOME = "${WORKSPACE}"
        GIT_BRANCH = 'jenkins-workshop'
        GIT_URI = 'https://github.com/kobi070/devopshift-welcome.git'
    }

    stages {
        // Stage 1 - Clone Git Project and print the URI and Branch
        stage('Stage 1 - Clone Git Project') {
            steps {
                script {
                    sh '''#!/bin/bash
                    echo "Git branch $GIT_BRANCH"
                    echo "Git Uri $GIT_URI"
                    echo "Cloning $GIT_BRANCH from $GIT_URI"
                    '''
                }
            }
        }
        // Stage 2 - Setup Environment and Install Dependencies
        stage('Stage 2 - Setup Environment and Install Dependencies') {
            steps {
                script {
                    sh '''#!/bin/bash
                    echo "Installing virtualenv"
                    echo "pip install virtualenv"
                    echo "Delete previous built venv and create a new one"
                    echo "rm -rf $PROJECT_HOME"
                    echo "virtualenv $PROJECT_HOME"
                    echo "source $PROJECT_HOME/bin/activate"
                    echo "Install required Python packages"
                    echo "pip install -r req.txt"
                    '''
                }
            }
        }

        stage('Stage 1.5 - Testing the App'){
            steps{
                parallel(
                    Lint: {
                        sh 'echo flake8 .'
                    },
                    Security: {
                        sh 'echo bandit -r .'
                    },
                    UnitTests: {
                        sh 'echo pytest'
                    },
                    IntegrationTests: {
                        sh 'echo behave'
                    },
                    PerformanceTests: {
                        sh 'echo locust'
                    },
                )
            }
        }

        // Stage 3 - Run Flask Application
        stage('Stage 3 - Run Flask Application') {
            steps {
                script {
                    sh '''#!/bin/bash
                    echo "source $PROJECT_HOME/bin/activate"
                    echo "Gets tasks"
                    echo "Starting Flask App on 0.0.0.0:5005"
                    echo "nohup flask run --host=0.0.0.0 --port=5005 > flask_app.log &"
                    '''
                }
            }
        }
        // Stage 4 - Wait for User Approval
        stage('Stage 4 - Wait for User Approval') {
            steps {
                script {
                    def userInput = input message: 'Is the App Running?',
                                        parameters: [choice(name: 'Proceed', choices: ['Proceed', 'Abort'])]
                    env.USER_CHOICE = userInput
                }
            }
        }
        // Stage 5 - Abort the Pipeline if the user choice was to abort
        stage('Stage 5 - Abort the Pipeline') {
            when {
                expression { env.USER_CHOICE == 'Abort' }
            }
            steps {
                script {
                    error 'Pipeline aborted by the user ${env.BUILD_USER}'
                }
            }
        }
        // Stage 6 - Verify App
        stage('Stage 6 - Verify App') {
            steps {
                script {
                    echo "Flask App is Running!"
                }
            }
        }
    }

    // Post section
    post {
        success {
            echo 'Pipeline completed successfully ${env.BUILD_USER}'
        }
        aborted {
            echo 'Pipeline aborted by user ${env.BUILD_USER}'
        }
        always {
            echo 'This will always run'
        }
    }
}
